package com.xys.cenxi.ext.print;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;

/*
 * Copyright (C) 2004 by Friederich Kupzog Elektronik & Software
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 * Author: Friederich Kupzog fkmk@kupzog.de www.kupzog.de/fkmk
 */
class KPrintExample {

  /**
   * This example shows how to create well-layouted text and graphics using
   * KPrint classes. The layout is completely paper-format independent and
   * works with different paper sizes. (Try it by selecting A3 / A5 in the
   * page setup dialog)
   */

  private Display d;

  public KPrintExample() {

    d = new Display();

    // we call the page setup dialog so that the user can
    // do adjustments if he likes.
    // In an application with a main window and a menu bar
    // this should not be neccessary.
    PageSetup p = new PageSetup(null);
    p.open();

    // Now we create an example document using the page setup settings
    PDocument doc = new PDocument("KPrint example");

    // the following functions create the text
    generateHeader(doc);
    generateFooter(doc);
    generateTitle(doc);
    generateSubtitle(doc, "Introduction");

    generateParagraph(
        doc,
        "KPrint is a collection of Java classes that allows "
            + "the user to generate print layouts within the SWT framework. The way "
            + "a layout is created is comparable to the "
            + "technique used to generate GUI layouts in SWT. You have some "
            + "global container (Shell in SWT, PDocument in KPrint), on which "
            + "you can place other elements (PBoxes).");

    generateSubtitle(doc, "The KPrint layout concept");

    generateParagraph(
        doc,
        "In SWT, you use Layouts "
            + "to determine how the widgets are arranged on the window. KPrint "
            + "has just one simple layout concept.");
    generateParagraph(
        doc,
        "The elements you can place on the paper are text "
            + "boxes, images, lines and whitespace. "
            + "One element can either be on the right of the previous element or below "
            + "the previous line of elements.");
    generateImage(
        doc,
        "/gfx/fig1.gif",
        "Figure 1: The position of an element is "
            + "relative to the position of the previous element and determined by "
            + "the style flag which can be PBox.POS_RIGHT or PBox.POS_BELOW.");
    generateParagraph(
        doc,
        "This layout concept is both simple but powerful. "
            + "There are some layouts that cannot be generated by this concept, "
            + "but in most cases one can find a simpler solution that is possible "
            + "to describe with the KPrint layout concept.");

    new PPageBreak(doc);

    generateSubtitle(doc, "This Text as a KPrint example");

    generateParagraph(
        doc,
        "This text is created using the KPrint framework. "
            + "It shows that KPrint can be used to layout long text passages, e.g. "
            + "to print help system contents. ");

    generateImage(
        doc,
        "/gfx/fig2.gif",
        "Figure 2: For right adjusted elements "
            + "you need to put a grabbing PPox, e.g. a PHSpace or a PTextBox in front "
            + "of them. For an example see the header of this document.");

    generateSubtitle(doc, "Printing KTables");

    generateParagraph(
        doc,
        "KPrint offers the PTable class that allows to print KTables. "
            + "(for more information about KTable see de.kupzog.ktable, www.kupzog.de/fkmk_uk) "
            + "All you need to print a table is a KTableModel and a PTableBoxProvider. "
            + "The KTableModel offers the data and the column size information. The "
            + "box provider is comparable to a cell renderer. It creates a PBox for "
            + "each table cell. You can use a default box provider which creates "
            + "a PLittleTextBox or you can implement your own box provider with "
            + "custom font, colors, borders or that provides PImageBoxes. See the "
            + "PrintKTableExample class for an example how to print data from a "
            + "KTableModel. You need the KTable.jar from www.kupzog.de/fkmk_uk "
            + "on your classpath to be able to compile this example. ");

    generateParagraph(
        doc,
        "Printing a Table works like that: you just add "
            + "a PTable object to your document and set its table model and box "
            + "provider. When the document is layouted, the layout function replaces "
            + "the PTable object by PBoxes that are fetched from the box "
            + "provider for each table cell.");

    generateSubtitle(doc, "Printing SWT Tables");

    generateParagraph(
        doc,
        "KPrint offers also the possibility to print "
            + "the PTable SWT tables. It works pretty much like printing KTables, but "
            + "you will use thw SWTPTable class instead of PTable. Thanks to Onsel Armagan in "
            + "Istanbul, Turkey for his feature.");

    // at last we can open a print preview
    PrintPreview pr = new PrintPreview(null, "Test", IconSource
        .getImage("print"), doc);
    pr.open();
    d.dispose();
  }

  private void generateHeader(PDocument doc) {
    PTextBox t;
    // We want the companie's logo right-adjusted on the first page

    // - to right-adjust the logo and the text,
    // we need a flexible (grabbing) filler.
    // This can be done with an empty text box.
    new PHSpace(doc.getFirstHeader(), PBox.GRAB, 0);

    // - the logo itself
    PImageBox i = new PImageBox(doc.getFirstHeader(), PBox.POS_RIGHT);
    i.setImage("/gfx/fkmk.gif", 96);

    // - some horizontal space between logo and text
    new PHSpace(doc.getFirstHeader(), PBox.POS_RIGHT, 0.2);

    // - a little Text
    t = new PTextBox(doc.getFirstHeader(), PBox.POS_RIGHT, 0, 3.4);
    t
        .setText("Friederich Kupzog\nElectronics & Software\nfkmk@kupzog.de\nwww.kupzog.de/fkmk");
    t.getTextStyle().fontSize = 9;

    // - some vertical space below
    new PVSpace(doc.getFirstHeader(), 1);

  }

  private void generateFooter(PDocument doc) {
    PTextBox box;

    // a line
    new PVSpace(doc.getFirstFooter(), 0.4);
    new PHLine(doc.getFirstFooter());
    new PVSpace(doc.getFirstFooter(), 0.4);

    // a flexible filler for right-adjustment
    box = new PTextBox(doc.getFirstFooter(), PBox.POS_BELOW | PBox.GRAB);
    box.setText("Generated by KPrintExample.java");

    // the page number
    box = new PPageNumber(doc.getFirstFooter(), PBox.POS_RIGHT);

    // this shall be on all pages:
    doc.setAllFootersLikeFirst();
  }

  private void generateSubtitle(PDocument doc, String text) {
    PTextBox t;

    // some vertical space
    new PVSpace(doc, 0.2);

    // the subtitle's text
    t = new PTextBox(doc, PBox.POS_BELOW);
    t.setText(text);
    t.getTextStyle().fontSize = 12;
    t.getTextStyle().fontStyle = SWT.BOLD;

    // some vertical space
    new PVSpace(doc, 0.2);
  }

  private void generateParagraph(PDocument doc, String text) {
    PTextBox t;

    // some margin for the text
    new PHSpace(doc, PBox.POS_BELOW, 2);

    // the text grabs the rest of the page width
    t = new PTextBox(doc, PBox.POS_RIGHT | PBox.GRAB);
    t.setText(text);
    t.getTextStyle().fontSize = 10;

    // some vertical space
    new PVSpace(doc, 0.2);

  }

  private void generateImage(PDocument doc, String imgName, String text) {
    PTextBox t;

    // some vertical space
    new PVSpace(doc, 0.3);

    // some margin for the image
    new PHSpace(doc, PBox.POS_BELOW, 2);

    PImageBox i = new PImageBox(doc, PBox.POS_RIGHT);
    i.setImage(imgName, 96);

    // some margin for the text
    new PVSpace(doc, 0.3);
    new PVSpace(doc, 0.0);
    new PHSpace(doc, PBox.POS_BELOW, 2);

    // the text grabs the rest of the page width
    t = new PTextBox(doc, PBox.POS_RIGHT | PBox.GRAB);
    t.setText(text);
    t.getTextStyle().fontSize = 8;
    t.getTextStyle().fontStyle = SWT.BOLD;
    t.getTextStyle().fontColor = SWT.COLOR_DARK_GRAY;

    new PVSpace(doc, 0.3);
  }

  private void generateTitle(PDocument doc) {
    PTextBox t;
    t = new PTextBox(doc, PBox.POS_BELOW);
    t.setText("Creating print layouts using KPrint");
    t.getTextStyle().fontSize = 15;

    // a line below the text
    new PVSpace(doc, 0.2);
    new PHLine(doc, 0.02, SWT.COLOR_BLACK);
    new PVSpace(doc, 1);
  }

  public static void main(String[] args) {
    new KPrintExample();
  }
}